@page "/openskyfetchdata"

@using MauiBlazorADSB_02.Data
@using System.Text.Json
@using System.Text.Json.Nodes
@using System.Text
@using System.Runtime.Serialization.Json
@using System.Globalization
@inject OpenSkyApiService openskyApiService

<h1>OpenSky Data</h1>

<p>This component fetches and displays OpenSky ADSB data from a service.</p>

@if (openskyData == null)
{
  <p><em>Loading..</em></p>
}
else
{
  <table class="table">
    <thead>
      <tr class="text-start">
          <th colspan="11">TIME AND COUNT</th>
      </tr>
    </thead>
    <tbody>
        <tr class="text-start">
          <td colspan="11" >TIME: @openskyTime AND COUNT: @openskyCount</td>
        </tr>
    </tbody>
  </table>

  <table class="table">
    <thead>
      <tr>
        <th>Icao24</th>
        <th>CallSign</th>
        <th>Origin Country</th>
        <th>UTC TimePosition</th>
        <th>UTC TimeLastContact</th>
        <th>Lng</th>
        <th>Lat</th>
        <th>Baro_alt</th>
        <th>On_Grd</th>
        <th>Velocity</th>
        @* <th>Heading</th> *@
        <th>Tru Trak</th>
        <th>Vert_Rate</th>
        <th>Sensors</th>
        <th>Geo_alt</th>
        <th>Squawk</th>
        <th>SPI</th>
        <th>Position_Src</th>
        <th>category</th>
        <th>Compass</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var osky in openskyData)
      {
        <tr>
          <td>@osky.Icao24.ToString()</td>
          <td>@osky.Callsign.ToString()</td>
          <td>@osky.Origin_country.ToString()</td>
          <td>@osky.Utc_timeposition.ToString()</td>
          <td>@osky.Utc_timelastcontact.ToString()</td>
          <td>@osky.Lng.ToString()</td>
          <td>@osky.Lat.ToString()</td>
          <td>@osky.Baro_alt.ToString()</td>
          <td>@osky.On_grd.ToString()</td>
          <td>@osky.Velocity.ToString()</td>
          @* <td>@osky.Heading.ToString()</td> *@
          <td>@osky.True_trk.ToString()</td>
          <td>@osky.Vert_rate.ToString()</td>
          <td>@osky.Sensors.ToString()</td>
          <td>@osky.Geo_alt.ToString()</td>
          <td>@osky.Squawk.ToString()</td>
          <td>@osky.Spi.ToString()</td>
          <td>@osky.Position_src.ToString()</td>
          @* <td>@osky.Category.ToString()</td> *@
          <td><img src="imgs/av_jet.jpg" alt="airplane" style=@osky.Trutrakrotate height="30" width="30" /></td>

        </tr>
      }
    </tbody>
  </table>

    <table class="table">
        <thead>
            <tr>
                <th>ERROR:</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@openskyError.ToString()</td>
            </tr>
        </tbody>
    </table>

}


@code {
    //  array list = [icao24, callsign, origin_country, utc_timeposition, utc_timelastcontact, lng, lat, baro_alt,
    // on_grd, velocity, true_trk, vert_rate, sensors, geo_alt, squawk, spi, position_src, category];
    private List<OpenSkyApiModelData5> openskyData;
    private string openskyTime;
    private string openskyCount;
    private string openskyError;

    //https_//opensky-network.org/api/states/all?lamin=37.020&lomin=-109.080&lamax=40.980&lomax=-102.080

    protected override async Task OnInitializedAsync()
    {
        openskyError = "";
        string minlat = "37.020"; //37.020
        string minlng = "-109.080"; //-109.080
        string maxlat = "40.980"; //40.980
        string maxlng = "-102.080"; //-102.080

        OpenSkyApiService openskyService = new OpenSkyApiService();
        //OpenSkyApiModel4 openskyDataResponse = new OpenSkyApiModel4();

        try
        {
            var data = await openskyService.GetOpenSkyInformationAsync(minlat, minlng, maxlat, maxlng);
            if (data != null)
            {
                OpenSkyApiModel5 fopensky = new OpenSkyApiModel5();
                //ValueKind
                JsonDocument jsonDoc = JsonDocument.Parse(data.ToString());
                JsonNode jsonNode = JsonNode.Parse(data.ToString());
                JsonNode jroot = jsonNode.Root;
                fopensky.Time = (int)jroot["time"];
                fopensky.States = new List<OpenSkyApiModelData5>();
                JsonArray statesarray = null;
                if (jroot["states"] != null)
                {
                    statesarray = jroot["states"]!.AsArray();
                    openskyCount = statesarray.Count.ToString();
                }
                OpenSkyApiModelData5 list = null;
                if (statesarray == null)
                {
                    openskyData = null;
                }

                for(int i = 0; i < statesarray.Count; i++)
                {
                    JsonNode state = statesarray[i];
                // }
                // foreach(JsonNode state in statesarray)
                // {
                    if (state is JsonArray)
                    {
                        if(state != null)
                        {
                            list = new OpenSkyApiModelData5();
                            list = ReturnOpenSkyApi(state.AsArray());
                            if(list != null)
                            {
                                fopensky.States.Add(list);
                            }
                        }    
                    }
                }
                openskyTime = fopensky.Time.ToString();
                openskyData = fopensky.States;
            }
        }catch(Exception ex)
        {
            string deserializeErr = "deserialize: " + ex.Message.ToString();
            System.Diagnostics.Debug.Print(deserializeErr);
            openskyError = openskyError + " " + deserializeErr;
        }
        finally
        {
            if (openskyError.Length > 0 && openskyData.Count == 0)
            {
                openskyData.Add(new OpenSkyApiModelData5());
                openskyData[0].Icao24 = openskyError.ToString();
            }
        }
    }

    //OpenSkyApiModelData4
    private OpenSkyApiModelData5 ReturnOpenSkyApi(JsonArray list)
    {
        const int icao24 = 0;
        const int callsign = 1;
        const int origin_country = 2;
        const int UTC_timeposition = 3;
        const int UTC_timelastcontact = 4;
        const int lng = 5;
        const int lat = 6;
        const int baro_alt = 7;
        const int on_grd = 8;
        const int velocity = 9;
        const int true_trk = 10;
        const int vert_rate = 11;
        const int sensors = 12;
        const int geo_alt = 13;
        const int squawk = 14;
        const int spi = 15;
        const int position_src = 16;
        OpenSkyApiModelData5 rlist = null;
        if (list != null)
        {
            rlist = new OpenSkyApiModelData5();
            string[] hlist = {"icao24", "callsign", "origin_country", "UTC_timeposition", "UTC_timelastcontact", "lng", "lat", "baro_alt",
"on_grd", "velocity true_trk", "vert_rate", "sensors", "geo_alt", "squawk", "spi", "position_src", "category" };
            //losky[hlist[h].ToString()] = list[h].ToString();
            //losky.Lng = list[h];

            try
            {
                rlist.Icao24 = Convert.ToString(list[icao24].ToString());
                rlist.Callsign = (string)list[callsign];
                rlist.Origin_country = (string)list[origin_country];
                rlist.Utc_timeposition = (int)list[UTC_timeposition];
                rlist.Utc_timelastcontact = (int)list[UTC_timelastcontact];
                rlist.Lng = Convert.ToDouble(list[lng].ToString());
                rlist.Lat = Convert.ToDouble(list[lat].ToString());

                rlist.Baro_alt = CheckJsonArrayDouble(list[baro_alt]); //7
                rlist.On_grd = (string)list[on_grd].ToString();
                rlist.Velocity = CheckJsonArrayDouble(list[velocity]);
                rlist.True_trk = CheckJsonArrayDouble(list[true_trk]);
                rlist.Vert_rate = CheckJsonArrayDouble(list[vert_rate]); //vert_rate
                rlist.Sensors = Convert.ToString(list[sensors]);
                rlist.Geo_alt = CheckJsonArrayDouble(list[geo_alt]); //13
                rlist.Squawk = Convert.ToString(list[squawk]);
                rlist.Spi = Convert.ToString(list[spi]);
                rlist.Position_src = Convert.ToString(list[position_src]);
                rlist.Trutrakrotate = $"transform:rotate({rlist.True_trk.ToString()}deg);";

            }catch(NullReferenceException nex)
            {
                string returnOpenSkyApiErr = "NEX: " + nex.Message.ToString();
                System.Diagnostics.Debug.Print(returnOpenSkyApiErr);
                openskyError = openskyError + " " + returnOpenSkyApiErr;
                rlist = null;
            }
        }
        return rlist;
    }

    private double CheckJsonArrayDouble(JsonNode jitem)
    {
        double jreturn = 0;
        if(jitem != null)
        {
            jreturn = Convert.ToDouble(jitem.ToString());
        }
        else
        {
            jreturn = 0;
        }
        return jreturn;
    }

    private string CheckJsonNodeType(JsonNode state)
    {
        string jtype = "";
        if(state == null)
        {
            return jtype;
        }
        state.AsValue().TryGetValue<string>(out string result);
        if (result.Length > 0)
        {
            if (int.TryParse(result, out int tintresult))
            {
                if (tintresult != 0)
                {
                    jtype = "int";
                }
            }
            else if (float.TryParse(result, out float tfresult))
            {
                if (tfresult != 0)
                {
                    jtype = "float";  
                }
            }
            else if (decimal.TryParse(result, out decimal tdresult))
            {
                if (tdresult != 0)
                {
                    jtype = "dec";
                }
            }
        }
        return jtype;
    }
}
