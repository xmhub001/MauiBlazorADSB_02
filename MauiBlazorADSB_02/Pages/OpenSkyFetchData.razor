@page "/openskyfetchdata"

@using MauiBlazorADSB_02.Data
@using System.Text.Json
@using System.Text.Json.Nodes
@using System.Text
@using System.Runtime.Serialization.Json
@inject OpenSkyApiService openskyApiService

<h1>OpenSky Data</h1>

<p>This component fetches and displays OpenSky ADSB data from a service.</p>

@if (openskyData == null)
{
    <p><em>Loading..</em></p>
}
else
{
    <table  class="table">
        <thead>
            <tr>
                <th>Icao24</th>
                <th>CallSign</th>
                <th>Origin Country</th>
                <th>UTC TimePosition</th>
                <th>UTC TimeLastContact</th>
                <th>Lng</th>
                <th>Lat</th>
                <th>Baro_alt</th>
                <th>On_Grd</th>
                <th>Velocity</th>
                <th>Heading</th>
                <th>True_Trak</th>
                <th>Vert_Rate</th>
                <th>Sensors</th>
                <th>Geo_alt</th>
                <th>Squawk</th>
                <th>SPI</th>
                <th>Position_Src</th>
                <th>category</th>
            </tr>
        </thead>
        <tbody>
            
            @foreach (var osky in openskyData)
            {
                <tr>
                    <td>@osky[0].Icao24.ToString()</td>
                    <td>@osky[0].Callsign.ToString()</td>
                    <td>@osky[0].Origin_country.ToString()</td>
                    <td>@osky[0].Utc_timeposition.ToString()</td>
                    <td>@osky[0].Utc_timelastcontact.ToString()</td>
                    <td>@osky[0].Lng.ToString()</td>
                    <td>@osky[0].Lat.ToString()</td>
                    <td>@osky[0].Baro_alt.ToString()</td>
                    <td>@osky[0].On_grd.ToString()</td>
                    <td>@osky[0].Velocity.ToString()</td>
                    @* <td>@osky[0].Heading.ToString()</td> *@
                    <td>@osky[0].True_trk.ToString()</td>
                    <td>@osky[0].Vert_rate.ToString()</td>
                    <td>@osky[0].Sensors.ToString()</td>
                    <td>@osky[0].Geo_alt.ToString()</td>
                    <td>@osky[0].Squawk.ToString()</td>
                    <td>@osky[0].Spi.ToString()</td>
                    <td>@osky[0].Position_src.ToString()</td>
                    @* <td>@osky[0].Category.ToString()</td> *@
                </tr>
            }
        </tbody>
    </table>

}


@code {
    //   array list = [icao24, callsign, origin_country, utc_timeposition, utc_timelastcontact, lng, lat, baro_alt,
    // on_grd, velocity, true_trk, vert_rate, sensors, geo_alt, squawk, spi, position_src, category];
    private List<List<OpenSkyApiModelData2>> openskyData;

    //https_//opensky-network.org/api/states/all?lamin=37.020&lomin=-109.080&lamax=40.980&lomax=-102.080

    protected override async Task OnInitializedAsync()
    {
        string minlat = "37.020"; //37.020
        string minlng = "-109.080"; //-109.080
        string maxlat = "40.980"; //40.980
        string maxlng = "-102.080"; //-102.080

        OpenSkyApiService openskyService = new OpenSkyApiService();

        //List<List<OpenSkyApiModelData2>> openskyApiData;
        List<OpenSkyApiModelData2> openskyDataResponse;

        try
        {
            var data = await openskyService.GetOpenSkyInformationAsync(minlat, minlng, maxlat, maxlng);
            if (data != null)
            {

                // JsonNode opensky = JsonNode.Parse(data.ToString());
                // // Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(myJsonResponse);
                // JsonSerializerOptions options = null;
                var openskyjson = JsonNode.Parse(data.ToString())["states"];
                openskyDataResponse = JsonSerializer.Deserialize<List<OpenSkyApiModelData2>>(openskyjson.ToString());  //(data.ToString());
                string llat = openskyDataResponse[0].Lat.ToString();

                // using (var ms = new MemoryStream(Encoding.Unicode.GetBytes(data.ToString())))
                // {
                //     DataContractJsonSerializer deserializer = new DataContractJsonSerializer(typeof(OpenSkyApiModel3));
                //     OpenSkyApiModel3 osObj2 = (OpenSkyApiModel3)deserializer.ReadObject(ms);
                //     //string llat = osObj2.States[0].Lat.ToString();
                // }

               // if (openskyDataResponse != null)
               // {
               //     //openskyApiData = openskyDataResponse.States;

               //     //openskyApiData = (List<OpenSkyApiModel>)data;
               //     //openskyData = openskyDataResponse.States;   //.ToArray<OpenSkyApiModelData2>();  //.ToArray<OpenSkyApiModel>();
               // }
               

                // JsonNode opensky = JsonNode.Parse(data.ToString());
                // JsonObject openskyObj = opensky!["States"]!.AsObject();
                // using var stream = new MemoryStream();
                // using var writer = new Utf8JsonWriter(stream);
                // openskyObj.WriteTo(writer);
                // writer.Flush();
                // List<List<OpenSkyApiModelData2>> openskylist = JsonSerializer.Deserialize<List<List<OpenSkyApiModelData2>>>(stream.ToArray());
                // string llat = openskylist[0][0].Lat.ToString();
                // openskyData = openskylist;

               
            }
        }catch(Exception ex)
        {
            System.Diagnostics.Debug.Print("deserialize: " + ex.Message.ToString());
        }


    }
}
